// Jenkinsfile for Developer Build Job (developer_build)
// - Uses Commit IDs for specified branches
// - Assumes this Jenkinsfile and Helm charts are in a SEPARATE repository from app source
// - Retrieves access URL via 'minikube service --url'
// - Agent requires: git, helm, kubectl, minikube

// Define constants for services and defaults
def ALL_SERVICES = [
    "admin-server",
    "api-gateway",
    "config-server",
    "customers-service",
    "discovery-server",
    "genai-service",
    "vets-service",
    "visits-service"
]
def DEFAULT_BRANCH_OR_TAG = "main" // Default branch name in parameters
def DEFAULT_IMAGE_TAG = "latest"   // Image tag corresponding to the default branch
def HELM_RELEASE_NAME = "petclinic-test" // Default Helm release name
def K8S_NAMESPACE = "petclinic-test"    // Default Kubernetes namespace for deployment

// --- PATHS ARE RELATIVE TO THIS REPO'S CHECKOUT ---
// *** ADJUST THIS PATH based on where charts are in THIS repo ***
def HELM_CHART_PATH = "charts/petclinic-umbrella" // Example: if charts are in 'charts/' subdir

// --- Directory for checking out App Source ---
def APP_SOURCE_DIR = "app-source" // Subdirectory name in workspace for app source code

pipeline {
    // *** Ensure agent has git, helm, kubectl, AND minikube installed ***
    agent any

    environment {
        // DOCKERHUB_USERNAME is not explicitly used in helm set args anymore,
        // but might be needed if referenced elsewhere or for other tools.
        // Ensure Helm chart values specify full image paths or use imagePullSecrets.
        DOCKERHUB_USERNAME = "22127422" // <--- *** VERIFY IF NEEDED / REPLACE ***
    }

    parameters {
        // --- Parameters for App Source Repo ---
        string(name: 'APP_SOURCE_REPO_URL', defaultValue: 'https://github.com/Burncake/spring-petclinic-microservices.git', description: 'Git repository URL for the application source code')
        string(name: 'APP_SOURCE_DEFAULT_BRANCH', defaultValue: 'main', description: 'Default branch of application source repo to ensure checkout works')

        // --- Service Branch Parameters ---
        // Descriptions clarify that 'main' uses the 'latest' tag
        string(name: 'ADMIN_SERVER_BRANCH', defaultValue: "${DEFAULT_BRANCH_OR_TAG}", description: "Branch for admin-server ('${DEFAULT_BRANCH_OR_TAG}' uses '${DEFAULT_IMAGE_TAG}' tag)")
        string(name: 'API_GATEWAY_BRANCH', defaultValue: "${DEFAULT_BRANCH_OR_TAG}", description: "Branch for api-gateway ('${DEFAULT_BRANCH_OR_TAG}' uses '${DEFAULT_IMAGE_TAG}' tag)")
        string(name: 'CONFIG_SERVER_BRANCH', defaultValue: "${DEFAULT_BRANCH_OR_TAG}", description: "Branch for config-server ('${DEFAULT_BRANCH_OR_TAG}' uses '${DEFAULT_IMAGE_TAG}' tag)")
        string(name: 'CUSTOMERS_SERVICE_BRANCH', defaultValue: "${DEFAULT_BRANCH_OR_TAG}", description: "Branch for customers-service ('${DEFAULT_BRANCH_OR_TAG}' uses '${DEFAULT_IMAGE_TAG}' tag)")
        string(name: 'DISCOVERY_SERVER_BRANCH', defaultValue: "${DEFAULT_BRANCH_OR_TAG}", description: "Branch for discovery-server ('${DEFAULT_BRANCH_OR_TAG}' uses '${DEFAULT_IMAGE_TAG}' tag)")
        string(name: 'GENAI_SERVICE_BRANCH', defaultValue: "${DEFAULT_BRANCH_OR_TAG}", description: "Branch for genai-service ('${DEFAULT_BRANCH_OR_TAG}' uses '${DEFAULT_IMAGE_TAG}' tag)")
        string(name: 'VETS_SERVICE_BRANCH', defaultValue: "${DEFAULT_BRANCH_OR_TAG}", description: "Branch for vets-service ('${DEFAULT_BRANCH_OR_TAG}' uses '${DEFAULT_IMAGE_TAG}' tag)")
        string(name: 'VISITS_SERVICE_BRANCH', defaultValue: "${DEFAULT_BRANCH_OR_TAG}", description: "Branch for visits-service ('${DEFAULT_BRANCH_OR_TAG}' uses '${DEFAULT_IMAGE_TAG}' tag)")
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
        timestamps()
        // Removed invalid ansiColor option
    }

    stages {
        // Stage 1: Verify Helm Chart Path in This Repo's Checkout
        stage('Verify Helm Chart Path') {
            steps {
                script {
                    echo "Pipeline running from workspace: ${env.WORKSPACE}"
                    echo "Verifying Helm chart directory exists relative to workspace: ${HELM_CHART_PATH}..."
                    // Use sh step for verification, fails build if path doesn't exist
                    sh "ls -ld ${HELM_CHART_PATH}"
                    echo "Helm chart path verified."
                }
            }
        }

        // Stage 2: Checkout Application Source Code into Subdirectory
        stage('Checkout Application Source Code') {
            steps {
                script {
                    echo "Checking out application source from ${params.APP_SOURCE_REPO_URL} into ./${APP_SOURCE_DIR} directory..."
                    // Use a directory block to isolate the checkout
                    dir(APP_SOURCE_DIR) {
                        // Clean directory before checkout (optional, but prevents conflicts)
                        deleteDir()
                        // Checkout application source code using parameters
                        checkout([
                            $class: 'GitSCM',
                            branches: [[name: params.APP_SOURCE_DEFAULT_BRANCH]], // Checkout default branch initially
                            userRemoteConfigs: [[url: params.APP_SOURCE_REPO_URL]],
                            // Optional: Add credentialsId if the repo is private
                            // userRemoteConfigs: [[url: params.APP_SOURCE_REPO_URL, credentialsId: 'your-app-repo-credentials-id']]
                        ])
                        echo "Application source checkout complete into ./${APP_SOURCE_DIR}"
                    }
                }
            }
        }

        // Stage 3: Prepare Helm Deployment Command (using Commit IDs)
        stage('Prepare Helm Deployment') {
            steps {
                script {
                    echo "Determining image tags for services and preparing Helm deployment command..."
                    def imageTagSetArgs = []
                    def gitErrors = [] // Collect errors during Git operations

                    // --- Operate within the application source directory for Git commands ---
                    dir(APP_SOURCE_DIR) {
                        echo "Fetching latest changes from Git remote 'origin' for Application Source in ./${APP_SOURCE_DIR} ..."
                        try {
                            // Fetch all remote branches/tags information without merging
                            sh 'git fetch origin --prune'
                            echo "Git fetch successful for Application Source."
                        } catch (e) {
                            // Fail fast if fetch fails
                            error "FATAL: Failed to fetch from App Source Git remote 'origin' at ${params.APP_SOURCE_REPO_URL}. Error: ${e.message}"
                        }

                        // --- Iterate through each service to determine the correct image tag ---
                        ALL_SERVICES.each { service ->
                            def paramName = "${service.toUpperCase().replace('-', '_')}_BRANCH"
                            def branchParam = params."${paramName}"?.trim() ?: DEFAULT_BRANCH_OR_TAG // Get parameter value

                            def imageTag = '' // Tag to be used for this service

                            if (branchParam.equalsIgnoreCase(DEFAULT_BRANCH_OR_TAG)) {
                                // Use the default tag (e.g., 'latest') if the parameter is 'main'
                                imageTag = DEFAULT_IMAGE_TAG
                                echo "Service [${service}]: Parameter='${branchParam}', Using Default Image Tag='${imageTag}'"
                            } else {
                                // Parameter is a specific branch name, find its latest commit ID from remote ref
                                echo "Service [${service}]: Parameter='${branchParam}', Attempting to find latest commit ID from origin/${branchParam}..."
                                try {
                                    def remoteBranchRef = "origin/${branchParam}"
                                    // Use git rev-parse to get the commit hash of the remote branch HEAD
                                    imageTag = sh(script: "git rev-parse --short ${remoteBranchRef}", returnStdout: true).trim()

                                    if (!imageTag) {
                                        // This case should ideally be caught by sh failing, but double-check
                                        throw new Exception("Commit ID resolved to empty string for remote ref '${remoteBranchRef}'.")
                                    }
                                    echo "Service [${service}]: Found commit ID '${imageTag}' for branch '${branchParam}'"

                                } catch (e) {
                                    // Handle potential errors like branch not found remotely
                                    def errorMsg = "Could not determine commit ID for service [${service}] branch '${branchParam}'. Check if branch exists remotely ('origin/${branchParam}'). Error: ${e.message}"
                                    echo "ERROR: ${errorMsg}"
                                    // Collect the error message
                                    gitErrors.add("Service [${service}] - Branch '${branchParam}': ${e.getMessage().trim()}")
                                    // Set a clearly invalid tag to prevent accidental deployment
                                    imageTag = "error-commit-not-found"
                                }
                            }
                            // Add the --set argument for this service's image tag
                            imageTagSetArgs.add("--set ${service}.image.tag=${imageTag}")

                        } // --- End iterating through services ---
                    } // --- End operating within application source directory ---

                    // --- Handle any Git errors encountered ---
                    if (!gitErrors.isEmpty()) {
                        // If any errors occurred during commit ID resolution, fail the build
                        error "FATAL: Failed to determine commit IDs for one or more branches:\n - ${gitErrors.join('\n - ')}"
                    }

                    // --- Construct Full Helm Command ---
                    // Note: Uses HELM_CHART_PATH relative to the main workspace root (where this repo is checked out)
                    def helmCmd = "helm upgrade --install ${HELM_RELEASE_NAME} ./${HELM_CHART_PATH} --namespace ${K8S_NAMESPACE} --create-namespace --wait --timeout 10m"
                    // --set global.dockerhubUser has been removed as requested
                    env.HELM_DEPLOY_COMMAND = "${helmCmd} ${imageTagSetArgs.join(' ')}"

                    echo "Helm command prepared:"
                    echo env.HELM_DEPLOY_COMMAND // Log the command that will be executed
                }
            }
        }

        // Stage 4: Deploy via Helm
        stage('Deploy via Helm') {
            steps {
                script {
                    echo "Executing Helm deployment to namespace '${K8S_NAMESPACE}'..."
                    try {
                        // Execute the constructed Helm command
                        sh "${env.HELM_DEPLOY_COMMAND}"
                        echo "Helm deployment successful for release '${HELM_RELEASE_NAME}'."
                    } catch (err) {
                        // Catch and report Helm execution errors
                        echo "ERROR: Helm deployment failed!"
                        echo err.getMessage()
                        currentBuild.result = 'FAILURE'
                        error("Helm deployment failed. Check Helm/Kubernetes logs for details.")
                    }
                }
            }
        }

        // Stage 5: Provide Access Information (Instructions for User)
        stage('Provide Access Information') {
            steps {
                script {
                    // Deployment was successful in the previous stage if we got here.
                    echo "-----------------------------------------------------"
                    echo "Helm deployment successful for release '${HELM_RELEASE_NAME}' in namespace '${K8S_NAMESPACE}'."
                    echo ""
                    echo "To access the application:"
                    echo "1. Open a terminal ON YOUR HOST PC (where Minikube/Docker Desktop is running)."
                    echo "2. Run the following command:"
                    // Construct the command using the pipeline's variables
                    def apiGatewayServiceName = "${HELM_RELEASE_NAME}-api-gateway" // e.g., petclinic-test-api-gateway
                    echo "   minikube service ${apiGatewayServiceName} -n ${K8S_NAMESPACE} --url"
                    echo ""
                    echo "3. The command will output one or more URLs. Open one in your browser."
                    echo "(You might need to leave the terminal running while accessing the URL if it uses a tunnel)."
                    echo "-----------------------------------------------------"
                    
                    // Clean up link
                    currentBuild.description = "Build #${currentBuild.number} [Clean up link](http://localhost:8080/job/cleanup_developer_build/build?token=superSecretCleanupToken)"
                }
            }
        }
    } // End stages

    post {
        always {
            echo "Developer Build Pipeline finished with status: ${currentBuild.currentResult}"
            // Optional: Add cleanup steps here if needed
            // cleanWs() // Clean workspace
        }
        success {
            echo "Deployment completed successfully."
        }
        unstable {
            echo "Deployment finished with warnings (e.g., could not get access URL automatically)."
        }
        failure {
            echo "Deployment FAILED. Check logs in Jenkins and Kubernetes (pods, events) for errors."
        }
    } // End post

} // End pipeline